// Generated by miqt-uic. To update this file, edit the .ui file in
// Qt Designer, and then run 'go generate'.
//
//go [:] generate miqt-uic -InFile mainWindow.ui -OutFile mainWindow.go

package userInterface

import (
	"log"
	"os"
	"strconv"

	qt "github.com/mappu/miqt/qt6"

	"github.com/relepega/pwscp/internal/appStrings"
	"github.com/relepega/pwscp/internal/pipewireInterface"
)

type MainWindowState struct {
	PipewireOptions *pipewireInterface.PipewireOptions
}

type MainWindowUi struct {
	MainWindow         *qt.QMainWindow
	centralwidget      *qt.QWidget
	comboBox_SR        *qt.QComboBox
	comboBox_BS        *qt.QComboBox
	groupBox_SR        *qt.QGroupBox
	groupBox_BS        *qt.QGroupBox
	buttonGroup_SR     *qt.QButtonGroup
	buttonGroup_BS     *qt.QButtonGroup
	radioButton_SR_S   *qt.QRadioButton
	radioButton_SR_F   *qt.QRadioButton
	radioButton_SR_SnF *qt.QRadioButton
	radioButton_BS_S   *qt.QRadioButton
	radioButton_BS_F   *qt.QRadioButton
	radioButton_BS_SnF *qt.QRadioButton
	button_Reset       *qt.QPushButton
	button_Apply       *qt.QPushButton
	button_Cancel      *qt.QPushButton
	label_Title        *qt.QLabel
	label_SR           *qt.QLabel
	label_BS           *qt.QLabel
	menubar            *qt.QMenuBar
	menuFile           *qt.QMenu
	statusbar          *qt.QStatusBar
	actionApply        *qt.QAction
	actionReload       *qt.QAction
	actionQuit         *qt.QAction

	state *MainWindowState
}

func (mw *MainWindowUi) onValuesChange(index int) {
	sr := mw.state.PipewireOptions.AvailableSampleRates()[mw.comboBox_SR.CurrentIndex()]
	bs := mw.state.PipewireOptions.AvailableBufferSizes()[mw.comboBox_BS.CurrentIndex()]

	if mw.state.PipewireOptions.CurrentSampleRate() == sr && mw.state.PipewireOptions.CurrentBufferSize() == bs {
		mw.button_Apply.SetEnabled(false)
		mw.button_Cancel.SetEnabled(false)
		mw.actionApply.SetEnabled(false)
	} else {
		mw.button_Apply.SetEnabled(true)
		mw.button_Cancel.SetEnabled(true)
		mw.actionApply.SetEnabled(true)
	}
}

func (mw *MainWindowUi) saveChanges() {
	// Disable UI immediately on the GUI thread
	mw.button_Apply.SetEnabled(false)
	mw.button_Cancel.SetEnabled(false)
	mw.actionApply.SetEnabled(false)
	mw.actionReload.SetEnabled(false)
	mw.actionQuit.SetEnabled(false)

	// Run work in a separate goroutine
	go func() {
		sr := mw.state.PipewireOptions.AvailableSampleRates()[mw.comboBox_SR.CurrentIndex()]
		bs := mw.state.PipewireOptions.AvailableBufferSizes()[mw.comboBox_BS.CurrentIndex()]

		if sr == pipewireInterface.AutoValue && !mw.radioButton_SR_F.IsChecked() {
			defaultSR := "48000"

			if mw.state.PipewireOptions.IsSampleRateAvailable(defaultSR) {
				sr = defaultSR
			} else {
				sr = mw.state.PipewireOptions.AvailableSampleRates()[0]
			}
		}

		if bs == pipewireInterface.AutoValue && !mw.radioButton_BS_F.IsChecked() {
			defaultBS := 1024
			defaultBSstr := "1024"

			minBS, _ := strconv.Atoi(mw.state.PipewireOptions.Clock.MinQuantum.Value())
			maxBS, _ := strconv.Atoi(mw.state.PipewireOptions.Clock.MaxQuantum.Value())

			if defaultBS < minBS {
				bs = mw.state.PipewireOptions.Clock.MinQuantum.Value()
			} else if defaultBS > maxBS {
				bs = mw.state.PipewireOptions.Clock.MaxQuantum.Value()
			} else {
				bs = defaultBSstr
			}
		}

		if mw.radioButton_SR_S.IsChecked() {
			mw.state.PipewireOptions.Clock.Rate.Set(sr)
		} else if mw.radioButton_SR_F.IsChecked() {
			if sr == pipewireInterface.AutoValue {
				sr = pipewireInterface.NilValue
			}
			mw.state.PipewireOptions.Clock.ForceRate.Set(sr)
		} else if mw.radioButton_SR_SnF.IsChecked() {
			mw.state.PipewireOptions.Clock.Rate.Set(sr)
			mw.state.PipewireOptions.Clock.ForceRate.Set(sr)
		}

		if mw.radioButton_BS_S.IsChecked() {
			mw.state.PipewireOptions.Clock.Quantum.Set(bs)
		} else if mw.radioButton_BS_F.IsChecked() {
			if bs == pipewireInterface.AutoValue {
				bs = pipewireInterface.NilValue
			}
			mw.state.PipewireOptions.Clock.ForceQuantum.Set(bs)
		} else if mw.radioButton_BS_SnF.IsChecked() {
			mw.state.PipewireOptions.Clock.Quantum.Set(bs)
			mw.state.PipewireOptions.Clock.ForceQuantum.Set(bs)
		}

		// Reâ€‘enable UI on the GUI thread
		mw.actionReload.SetEnabled(true)
		mw.actionQuit.SetEnabled(true)
	}()
}

func (mw *MainWindowUi) resetChanges() {
	currentSR := mw.state.PipewireOptions.CurrentSampleRate()
	currentBS := mw.state.PipewireOptions.CurrentBufferSize()

	for i, v := range mw.state.PipewireOptions.AvailableSampleRates() {
		if v == currentSR {
			mw.comboBox_SR.SetCurrentIndex(i)
			break
		}
	}

	for i, v := range mw.state.PipewireOptions.AvailableBufferSizes() {
		if v == currentBS {
			mw.comboBox_BS.SetCurrentIndex(i)
			break
		}
	}
}

func (mw *MainWindowUi) resetToDefault() {
	// Disable UI immediately on the GUI thread
	mw.button_Apply.SetEnabled(false)
	mw.button_Cancel.SetEnabled(false)
	mw.actionApply.SetEnabled(false)
	mw.actionReload.SetEnabled(false)
	mw.actionQuit.SetEnabled(false)

	defaultSR := "48000"

	defaultMinBS := 32
	defaultMaxBS := 8192

	defaultBS := 1024
	defaultBSstr := "1024"

	if mw.state.PipewireOptions.IsSampleRateAvailable(defaultSR) {
		mw.state.PipewireOptions.Clock.Rate.Set(defaultSR)
	} else {
		mw.state.PipewireOptions.Clock.Rate.Set(
			mw.state.PipewireOptions.AvailableSampleRates()[0],
		)
	}

	mw.state.PipewireOptions.Clock.MinQuantum.Set(strconv.Itoa(defaultMinBS))
	mw.state.PipewireOptions.Clock.MaxQuantum.Set(strconv.Itoa(defaultMaxBS))

	if defaultBS < defaultMinBS {
		mw.state.PipewireOptions.Clock.Quantum.Set(mw.state.PipewireOptions.Clock.MinQuantum.Value())
	} else if defaultBS > defaultMaxBS {
		mw.state.PipewireOptions.Clock.Quantum.Set(mw.state.PipewireOptions.Clock.MaxQuantum.Value())
	} else {
		mw.state.PipewireOptions.Clock.Quantum.Set(defaultBSstr)
	}

	mw.state.PipewireOptions.Clock.AllowedRates.Set("'[ 44100, 48000, 64000, 88200, 96000, 128000, 176400, 192000, 256000, 352800, 384000, 512000, 705600, 768000 ]'")
	mw.state.PipewireOptions.Clock.ForceQuantum.Set(pipewireInterface.NilValue)
	mw.state.PipewireOptions.Clock.ForceRate.Set(pipewireInterface.NilValue)

	mw.actionReload.SetEnabled(true)
	mw.actionQuit.SetEnabled(true)
}

func (mw *MainWindowUi) reloadPwOpts() {
	mw.button_Apply.SetEnabled(false)
	mw.button_Cancel.SetEnabled(false)
	mw.actionApply.SetEnabled(false)
	mw.actionReload.SetEnabled(false)
	mw.actionQuit.SetEnabled(false)

	mw.comboBox_SR.BlockSignals(true)
	mw.comboBox_BS.BlockSignals(true)

	mw.state.PipewireOptions.UpdateAll()

	mw.comboBox_SR.Clear()
	mw.comboBox_SR.AddItems(mw.state.PipewireOptions.AvailableSampleRates())

	mw.comboBox_BS.Clear()
	mw.comboBox_BS.AddItems(mw.state.PipewireOptions.AvailableBufferSizes())

	mw.comboBox_SR.BlockSignals(false)
	mw.comboBox_BS.BlockSignals(false)

	currentSR := mw.state.PipewireOptions.CurrentSampleRate()
	currentBS := mw.state.PipewireOptions.CurrentBufferSize()

	mw.button_Apply.SetEnabled(true)
	mw.button_Cancel.SetEnabled(true)
	mw.actionApply.SetEnabled(true)

	for i, v := range mw.state.PipewireOptions.AvailableSampleRates() {
		if v == currentSR {
			mw.comboBox_SR.SetCurrentIndex(i)

			mw.button_Apply.SetEnabled(false)
			mw.button_Cancel.SetEnabled(false)
			mw.actionApply.SetEnabled(false)

			break
		}
	}

	for i, v := range mw.state.PipewireOptions.AvailableBufferSizes() {
		if v == currentBS {
			mw.comboBox_BS.SetCurrentIndex(i)

			mw.button_Apply.SetEnabled(false)
			mw.button_Cancel.SetEnabled(false)
			mw.actionApply.SetEnabled(false)

			break
		}
	}

	mw.MainWindow.Update()

	mw.actionReload.SetEnabled(true)
	mw.actionQuit.SetEnabled(true)
}

// NewMainWindowUi creates all Qt widget classes for MainWindow.
func NewMainWindowUi() *MainWindowUi {
	ui := &MainWindowUi{}

	pwOpts, err := pipewireInterface.NewPipewireOptions()
	if err != nil {
		log.Fatalln("NewMainWindowUi:", err)
	}

	ui.state = &MainWindowState{
		PipewireOptions: pwOpts,
	}

	currentSR := pwOpts.CurrentSampleRate()
	currentBS := pwOpts.CurrentBufferSize()

	ui.MainWindow = qt.NewQMainWindow(nil)
	ui.MainWindow.SetObjectName(*qt.NewQAnyStringView3(appStrings.AppNameWithVersion()))
	ui.MainWindow.QWidget.SetWindowTitle(appStrings.AppNameWithVersion())
	ui.MainWindow.Resize(500, 400)
	ui.MainWindow.OnResizeEvent(func(super func(event *qt.QResizeEvent), event *qt.QResizeEvent) {
		ui.MainWindow.Resize(500, 400)
	})

	ui.actionApply = qt.NewQAction()
	ui.actionApply.SetObjectName(*qt.NewQAnyStringView3("actionApply"))
	ui.actionApply.SetShortcut(qt.NewQKeySequence4(*qt.NewQKeyCombination6(qt.CTRL, qt.Key_S)))
	ui.actionApply.SetEnabled(false)
	ui.actionApply.OnTriggered(ui.saveChanges)

	ui.actionReload = qt.NewQAction()
	ui.actionReload.SetObjectName(*qt.NewQAnyStringView3("actionReload"))
	ui.actionReload.SetShortcut(qt.NewQKeySequence4(*qt.NewQKeyCombination5(qt.Key_F5)))

	ui.actionReload.OnTriggered(ui.reloadPwOpts)

	ui.actionQuit = qt.NewQAction()
	ui.actionQuit.SetObjectName(*qt.NewQAnyStringView3("actionQuit"))
	ui.actionQuit.SetShortcut(qt.NewQKeySequence4(*qt.NewQKeyCombination6(qt.CTRL, qt.Key_Q)))
	ui.actionQuit.OnTriggered(func() {
		os.Exit(0)
	})

	ui.menubar = qt.NewQMenuBar(ui.MainWindow.QWidget)
	ui.menubar.SetObjectName(*qt.NewQAnyStringView3("menubar"))
	ui.menubar.SetEnabled(true)
	ui.menubar.Resize(500, 30)

	ui.menuFile = qt.NewQMenu(ui.menubar.QWidget)
	ui.menuFile.SetObjectName(*qt.NewQAnyStringView3("menuFile"))
	ui.menuFile.QWidget.AddAction(ui.actionApply)
	ui.menuFile.QWidget.AddAction(ui.actionReload)
	ui.menuFile.AddSeparator()
	ui.menuFile.QWidget.AddAction(ui.actionQuit)

	ui.menubar.AddMenu(ui.menuFile)

	ui.MainWindow.SetMenuBar(ui.menubar)

	ui.centralwidget = qt.NewQWidget(ui.MainWindow.QWidget)
	ui.centralwidget.SetObjectName(*qt.NewQAnyStringView3("centralwidget"))

	ui.label_Title = qt.NewQLabel(ui.centralwidget)
	ui.label_Title.SetObjectName(*qt.NewQAnyStringView3("label_Title"))
	ui.label_Title.SetFont(TitleFont())
	ui.label_Title.SetGeometryWithGeometry(qt.NewQRect4(94, 10, 312, 29))

	ui.label_SR = qt.NewQLabel(ui.centralwidget)
	ui.label_SR.SetObjectName(*qt.NewQAnyStringView3("label_SR"))
	ui.label_SR.SetGeometryWithGeometry(qt.NewQRect4(114, 70, 72, 18))

	ui.comboBox_SR = qt.NewQComboBox(ui.centralwidget)
	ui.comboBox_SR.SetObjectName(*qt.NewQAnyStringView3("comboBox_SR"))
	ui.comboBox_SR.SetGeometryWithGeometry(qt.NewQRect4(100, 120, 100, 32))
	ui.comboBox_SR.SetMaxVisibleItems(5)
	ui.comboBox_SR.AddItems(ui.state.PipewireOptions.AvailableSampleRates())

	for i, v := range ui.state.PipewireOptions.AvailableSampleRates() {
		if v == currentSR {
			ui.comboBox_SR.SetCurrentIndex(i)
			break
		}
	}

	ui.comboBox_SR.OnCurrentIndexChanged(ui.onValuesChange)

	ui.buttonGroup_SR = qt.NewQButtonGroup2(ui.MainWindow.QObject)

	ui.radioButton_SR_S = qt.NewQRadioButton(ui.centralwidget)
	ui.radioButton_SR_S.SetObjectName(*qt.NewQAnyStringView3("checkBox_SR_S"))
	ui.radioButton_SR_S.SetGeometry(100, 170, 137, 23)
	ui.buttonGroup_SR.AddButton(ui.radioButton_SR_S.QAbstractButton)
	ui.radioButton_SR_S.Show()

	ui.radioButton_SR_F = qt.NewQRadioButton(ui.centralwidget)
	ui.radioButton_SR_F.SetObjectName(*qt.NewQAnyStringView3("checkBox_SR_F"))
	ui.radioButton_SR_F.SetGeometry(100, 200, 137, 23)
	ui.buttonGroup_SR.AddButton(ui.radioButton_SR_F.QAbstractButton)
	ui.radioButton_SR_F.Show()

	ui.radioButton_SR_SnF = qt.NewQRadioButton(ui.centralwidget)
	ui.radioButton_SR_SnF.SetObjectName(*qt.NewQAnyStringView3("checkBox_SR_SnF"))
	ui.radioButton_SR_SnF.SetGeometry(100, 230, 137, 23)
	ui.radioButton_SR_SnF.SetChecked(true)
	ui.buttonGroup_SR.AddButton(ui.radioButton_SR_SnF.QAbstractButton)
	ui.radioButton_SR_SnF.Show()

	ui.label_BS = qt.NewQLabel(ui.centralwidget)
	ui.label_BS.SetObjectName(*qt.NewQAnyStringView3("label_BS"))
	ui.label_BS.SetGeometryWithGeometry(qt.NewQRect4(318, 70, 64, 18))

	ui.comboBox_BS = qt.NewQComboBox(ui.centralwidget)
	ui.comboBox_BS.SetObjectName(*qt.NewQAnyStringView3("comboBox_BS"))
	ui.comboBox_BS.SetGeometryWithGeometry(qt.NewQRect4(300, 120, 100, 32))
	ui.comboBox_BS.SetMaxVisibleItems(5)
	ui.comboBox_BS.AddItems(ui.state.PipewireOptions.AvailableBufferSizes())

	for i, v := range ui.state.PipewireOptions.AvailableBufferSizes() {
		if v == currentBS {
			ui.comboBox_BS.SetCurrentIndex(i)
			break
		}
	}

	ui.comboBox_BS.OnCurrentIndexChanged(ui.onValuesChange)

	ui.buttonGroup_BS = qt.NewQButtonGroup2(ui.MainWindow.QObject)

	ui.radioButton_BS_S = qt.NewQRadioButton(ui.centralwidget)
	ui.radioButton_BS_S.SetObjectName(*qt.NewQAnyStringView3("checkBox_BS_S"))
	ui.radioButton_BS_S.SetGeometry(300, 170, 137, 23)
	ui.buttonGroup_BS.AddButton(ui.radioButton_BS_S.QAbstractButton)
	ui.radioButton_BS_S.Show()

	ui.radioButton_BS_F = qt.NewQRadioButton(ui.centralwidget)
	ui.radioButton_BS_F.SetObjectName(*qt.NewQAnyStringView3("checkBox_BS_F"))
	ui.radioButton_BS_F.SetGeometry(300, 200, 137, 23)
	ui.buttonGroup_BS.AddButton(ui.radioButton_BS_F.QAbstractButton)
	ui.radioButton_BS_F.Show()

	ui.radioButton_BS_SnF = qt.NewQRadioButton(ui.centralwidget)
	ui.radioButton_BS_SnF.SetObjectName(*qt.NewQAnyStringView3("checkBox_BS_SnF"))
	ui.radioButton_BS_SnF.SetGeometry(300, 230, 137, 23)
	ui.radioButton_BS_SnF.SetChecked(true)
	ui.buttonGroup_BS.AddButton(ui.radioButton_BS_SnF.QAbstractButton)
	ui.radioButton_BS_SnF.Show()

	ui.button_Reset = qt.NewQPushButton(ui.centralwidget)
	ui.button_Reset.SetObjectName(*qt.NewQAnyStringView3("button_Reset"))
	ui.button_Reset.SetGeometry(154, 297, 140, 34)
	ui.button_Reset.OnClicked(ui.resetToDefault)

	ui.button_Apply = qt.NewQPushButton(ui.centralwidget)
	ui.button_Apply.SetObjectName(*qt.NewQAnyStringView3("button_Apply"))
	ui.button_Apply.SetGeometry(304, 297, 88, 34)
	ui.button_Apply.OnClicked(ui.saveChanges)
	ui.button_Apply.SetEnabled(false)

	ui.button_Cancel = qt.NewQPushButton(ui.centralwidget)
	ui.button_Cancel.SetObjectName(*qt.NewQAnyStringView3("button_Cancel"))
	ui.button_Cancel.SetGeometry(402, 297, 88, 34)
	ui.button_Cancel.OnClicked(ui.resetChanges)
	ui.button_Cancel.SetEnabled(false)

	ui.MainWindow.SetCentralWidget(ui.centralwidget)

	ui.statusbar = qt.NewQStatusBar(ui.MainWindow.QWidget)
	ui.statusbar.SetObjectName(*qt.NewQAnyStringView3("statusbar"))

	ui.MainWindow.SetStatusBar(ui.statusbar)

	ui.Retranslate()

	return ui
}

// Retranslate reapplies all text translations.
func (ui *MainWindowUi) Retranslate() {
	ui.MainWindow.SetWindowTitle(qt.QCoreApplication_Tr(appStrings.AppNameWithVersion()))
	ui.actionApply.SetText(qt.QMainWindow_Tr("Apply"))
	ui.actionReload.SetText(qt.QMainWindow_Tr("Reload config"))
	ui.actionQuit.SetText(qt.QMainWindow_Tr("Quit"))
	ui.button_Reset.SetText(qt.QWidget_Tr("Reset to default"))
	ui.button_Apply.SetText(qt.QWidget_Tr("Apply"))
	ui.button_Cancel.SetText(qt.QWidget_Tr("Cancel"))
	ui.label_Title.SetText(qt.QWidget_Tr(appStrings.APP_NAME))
	ui.label_SR.SetText(qt.QWidget_Tr("Sample rate"))
	ui.label_BS.SetText(qt.QWidget_Tr("Buffer size"))
	ui.radioButton_SR_S.SetText(qt.QWidget_Tr("Suggest"))
	ui.radioButton_SR_F.SetText(qt.QWidget_Tr("Force"))
	ui.radioButton_SR_SnF.SetText(qt.QWidget_Tr("Suggest and Force"))
	ui.radioButton_BS_S.SetText(qt.QWidget_Tr("Suggest"))
	ui.radioButton_BS_F.SetText(qt.QWidget_Tr("Force"))
	ui.radioButton_BS_SnF.SetText(qt.QWidget_Tr("Suggest and Force"))
	ui.menuFile.SetTitle(qt.QMenuBar_Tr("File"))
}
